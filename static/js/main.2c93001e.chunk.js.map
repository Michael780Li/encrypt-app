{"version":3,"sources":["Form.js","Encrypt.js","App.js","index.js"],"names":["Form","initialState","message","passKey","state","instruction","handleChange","event","target","name","value","setState","generateKey","props","submit","handleSubmit","this","type","id","onChange","onClick","htmlFor","Component","binarySearch","search","array","mid","start","end","length","Math","floor","Encrypt","result","input","table","MIN","toEncrypt","arrMessage","split","i","charCodeAt","arrPassKey","arrUniPassKey","Array","keyRepeat","j","push","k","encrypted","m","a","b","encryptString","n","String","fromCharCode","doEncrypt","decrypt","decryptMessage","doDecrypt","className","style","border","minHeight","marginBottom","overflowWrap","App","messages","bool","row","MAX","ARRAYSIZE","console","log","textAlign","width","marginLeft","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c93001e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Form extends Component {\r\n  initialState = {\r\n    message: \"\",\r\n    passKey: \"\",\r\n  };\r\n  state = this.initialState;\r\n\r\n  instruction = () => {\r\n    return (\r\n      <div>\r\n        <p>\r\n          This program encrypts messages using Ceaser's encryption. Supported\r\n          characters include Ascii characters ranging from Dec 32 to 125\r\n          (however some characters may not render properly)\r\n        </p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { message, passKey } = this.state;\r\n    return (\r\n      <form>\r\n        {this.instruction()}\r\n\r\n        <input\r\n          type=\"text\"\r\n          value={passKey}\r\n          name=\"passKey\"\r\n          id=\"inputkey\"\r\n          onChange={this.handleChange}\r\n        ></input>\r\n        <input type=\"button\" value=\"Generate Key\" onClick={this.generateKey} />\r\n\r\n        <label htmlFor=\"message\">Message:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"inputMessage\"\r\n          name=\"message\"\r\n          value={message}\r\n          onChange={this.handleChange}\r\n        />\r\n        <input type=\"button\" value=\"Submit\" onClick={this.submit} />\r\n      </form>\r\n    );\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  generateKey = () => {\r\n    this.props.generateKey(this.state);\r\n    this.setState(this.initialState);\r\n  };\r\n\r\n  submit = () => {\r\n    this.props.handleSubmit(this.state);\r\n    this.setState(this.initialState);\r\n  };\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\r\n\r\nconst Encrypt = (props) => {\r\n  const { input, table, MIN } = props;\r\n  const { toEncrypt, message, passKey } = input;\r\n\r\n  // const Encrypt = (props) => {\r\n  //   const { input, table, MIN } = props;\r\n  //   const { toEncrypt, message, passKey } = input;\r\n  var result;\r\n\r\n  if (toEncrypt === true) {\r\n    result = doEncrypt(message, passKey, table, MIN);\r\n  } else if (toEncrypt === false) {\r\n    result = doDecrypt(message, passKey, table, MIN);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <label value=\"message\">Encrypted / Decrypted Message:</label>\r\n      <div\r\n        className=\"container\"\r\n        style={{\r\n          border: \"1px solid #dedede\",\r\n          minHeight: \"100px\",\r\n          marginBottom: \"50px\",\r\n          id: \"encryptMessage\",\r\n        }}\r\n      >\r\n        <h5 style={{ overflowWrap: \" break-word\" }}>{result}</h5>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction doEncrypt(message, passKey, table, MIN) {\r\n  if (message.length > 0 && passKey.length > 0) {\r\n    //split message into seperate characters and convert to unicode\r\n    var arrMessage = message.split(\"\");\r\n    for (let i = 0; i < arrMessage.length; i++) {\r\n      arrMessage[i] = arrMessage[i].charCodeAt(0);\r\n    }\r\n    //Find the corresponding unicode for encryption\r\n    var arrPassKey = passKey.split(\"\");\r\n    var arrUniPassKey = new Array();\r\n    var keyRepeat = 0;\r\n    for (let j = 0; j < arrMessage.length; j++) {\r\n      if (j - keyRepeat === arrPassKey.length) {\r\n        keyRepeat = j;\r\n      }\r\n      arrUniPassKey.push(arrPassKey[j - keyRepeat]);\r\n    }\r\n    for (let k = 0; k < arrUniPassKey.length; k++) {\r\n      arrUniPassKey[k] = arrUniPassKey[k].charCodeAt(0);\r\n    }\r\n    //find the encryption characters\r\n    var encrypted = new Array();\r\n\r\n    for (let m = 0; m < arrMessage.length; m++) {\r\n      var a = arrMessage[m] - MIN;\r\n      var b = arrUniPassKey[m] - MIN;\r\n      encrypted[m] = table[a][b];\r\n    }\r\n\r\n    //to characters\r\n    var encryptString = \"\";\r\n    for (let n = 0; n < encrypted.length; n++) {\r\n      encrypted[n] = String.fromCharCode(encrypted[n]);\r\n\r\n      encryptString = encryptString + encrypted[n];\r\n    }\r\n  }\r\n  return encryptString;\r\n}\r\nfunction transformHTMLEntity(character) {\r\n  return \"&#\" + character + \";\";\r\n}\r\n\r\nfunction doDecrypt(message, passKey, table, MIN) {\r\n  //message is encrypted\r\n\r\n  //split message into seperate characters and convert to unicode\r\n  var arrMessage = message.split(\"\");\r\n  for (let i = 0; i < arrMessage.length; i++) {\r\n    arrMessage[i] = arrMessage[i].charCodeAt(0);\r\n  }\r\n\r\n  //make sure passKey is atleast as long as the message\r\n\r\n  var arrPassKey = passKey.split(\"\");\r\n\r\n  var arrUniPassKey = new Array();\r\n  var keyRepeat = 0;\r\n  for (let j = 0; j < arrMessage.length; j++) {\r\n    if (j - keyRepeat === arrPassKey.length) {\r\n      keyRepeat = j;\r\n    }\r\n    arrUniPassKey.push(arrPassKey[j - keyRepeat]);\r\n  }\r\n  for (let k = 0; k < arrUniPassKey.length; k++) {\r\n    arrUniPassKey[k] = arrUniPassKey[k].charCodeAt(0);\r\n  }\r\n\r\n  //decrypt(unicode)\r\n  let decrypt = new Array();\r\n  var decryptMessage = \"\";\r\n  for (let i = 0; i < arrMessage.length; i++) {\r\n    decrypt[i] = binarySearch(arrMessage[i], table[arrUniPassKey[i] - MIN]);\r\n    decrypt[i] = String.fromCharCode(decrypt[i] + MIN);\r\n    decryptMessage = decryptMessage + decrypt[i];\r\n  }\r\n  return decryptMessage;\r\n}\r\nfunction binarySearch(search, array) {\r\n  var start = 0;\r\n  var end = array.length - 1;\r\n  var mid;\r\n  while (start <= end) {\r\n    mid = Math.floor((start + end) / 2);\r\n\r\n    if (array[mid] === search) {\r\n      return mid;\r\n    } else if (search > array[mid]) {\r\n      start = mid + 1;\r\n    } else {\r\n      end = mid - 1;\r\n    }\r\n  }\r\n}\r\nexport default Encrypt;\r\n","import React, { Component } from \"react\";\r\nimport Form from \"./Form\";\r\nimport Encrypt from \"./Encrypt\";\r\nclass App extends Component {\r\n  state = {\r\n    passKey: \"\",\r\n    message: \"\",\r\n    toEncrypt: null,\r\n  };\r\n\r\n  handleSubmit = (messages) => {\r\n    const { message, passKey } = messages;\r\n    this.setState({\r\n      message: message,\r\n    });\r\n  };\r\n  generateKey = (messages) => {\r\n    const { message, passKey } = messages;\r\n    this.setState({\r\n      passKey: passKey,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    //make ceaser's table of characters (unicode)\r\n    const MAX = 125; //MIN and MAX control the range of supported input (corresponds to the unicode number)\r\n    const MIN = 32;\r\n    const ARRAYSIZE = MAX - MIN + 1;\r\n    const table = new Array(ARRAYSIZE);\r\n    for (let i = 0; i < ARRAYSIZE; i++) {\r\n      table[i] = new Array(ARRAYSIZE);\r\n    }\r\n    var row;\r\n    for (let i = 0; i < table.length; i++) {\r\n      row = i;\r\n      for (let j = 0; j < table.length; j++) {\r\n        table[i][j] = MIN + j + row;\r\n        if (j + row === ARRAYSIZE - 1) row -= table.length;\r\n      }\r\n    }\r\n\r\n    console.log(table);\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 style={{ textAlign: \"center\" }}>\r\n          Encryption and Decryption Machine\r\n        </h1>\r\n\r\n        <Form handleSubmit={this.handleSubmit} generateKey={this.generateKey} />\r\n        <label>Input:</label>\r\n        <div>\r\n          <table style={{ border: \"1px solid #dedede\" }}>\r\n            <tbody>\r\n              <tr>\r\n                <th style={{ border: \"1px solid #dedede\" }}>your key:</th>\r\n                <th style={{ width: \"80%\", border: \"1px solid #dedede\" }}>\r\n                  {this.state.passKey}\r\n                </th>\r\n              </tr>\r\n              <tr>\r\n                <th\r\n                  style={{\r\n                    border: \"1px solid #dedede\",\r\n                    border: \"1px solid #dedede\",\r\n                  }}\r\n                >\r\n                  your message:\r\n                </th>\r\n                <th>{this.state.message}</th>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        <input\r\n          type=\"button\"\r\n          value=\"Encrypt\"\r\n          onClick={() => this.toEncrypt(true)}\r\n        ></input>\r\n        <input\r\n          type=\"button\"\r\n          value=\"Decrypt\"\r\n          style={{ marginLeft: \"20px\" }}\r\n          onClick={() => this.toEncrypt(false)}\r\n        ></input>\r\n        <Encrypt input={this.state} table={table} MIN={MIN} />\r\n      </div>\r\n    );\r\n  }\r\n  toEncrypt = (bool) => {\r\n    if (bool === true) {\r\n      this.setState({ toEncrypt: true });\r\n    } else {\r\n      this.setState({ toEncrypt: false });\r\n    }\r\n  };\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDom.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}